/*
Deployment script for PetPolicySqlDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PetPolicySqlDb"
:setvar DefaultFilePrefix "PetPolicySqlDb"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [CountryId]             INT          IDENTITY (1, 1) NOT NULL,
    [CountryIso3LetterCode] CHAR (3)     NOT NULL,
    [CountryName]           VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([CountryId] ASC)
);


GO
PRINT N'Creating [dbo].[Owner]...';


GO
CREATE TABLE [dbo].[Owner] (
    [OwnerId]   INT            IDENTITY (1, 1) NOT NULL,
    [OwnerName] NVARCHAR (200) NULL,
    [CountryId] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([OwnerId] ASC)
);


GO
PRINT N'Creating [dbo].[Policy]...';


GO
CREATE TABLE [dbo].[Policy] (
    [PolicyId]               INT          IDENTITY (1, 1) NOT NULL,
    [PolicyNumberIncrement]  INT          NOT NULL,
    [PolicyNumber]           VARCHAR (40) NOT NULL,
    [PolicyEnrollmentDate]   DATE         NOT NULL,
    [PolicyCancellationDate] DATE         NULL,
    [CountryId]              INT          NOT NULL,
    [OwnerId]                INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([PolicyId] ASC)
);


GO
PRINT N'Creating [dbo].[Policy].[IX_Policy_PolicyEnrollmentDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Policy_PolicyEnrollmentDate]
    ON [dbo].[Policy]([PolicyEnrollmentDate] ASC);


GO
PRINT N'Creating [dbo].[Policy].[IX_Policy_PolicyCancellationDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Policy_PolicyCancellationDate]
    ON [dbo].[Policy]([PolicyCancellationDate] ASC);


GO
PRINT N'Creating [dbo].[Policy].[IX_Policy_PolicyNumberIncrement]...';


GO
CREATE NONCLUSTERED INDEX [IX_Policy_PolicyNumberIncrement]
    ON [dbo].[Policy]([PolicyNumberIncrement] ASC);


GO
PRINT N'Creating [dbo].[Pet]...';


GO
CREATE TABLE [dbo].[Pet] (
    [PetId]          INT           IDENTITY (1, 1) NOT NULL,
    [OwnerId]        INT           NULL,
    [PetName]        NVARCHAR (40) NULL,
    [PetDateOfBirth] DATE          NULL,
    [BreedId]        INT           NULL,
    PRIMARY KEY CLUSTERED ([PetId] ASC)
);


GO
PRINT N'Creating [dbo].[Pet].[IX_Pet_PetDateOfBirth]...';


GO
CREATE NONCLUSTERED INDEX [IX_Pet_PetDateOfBirth]
    ON [dbo].[Pet]([PetDateOfBirth] ASC);


GO
PRINT N'Creating [dbo].[Breed]...';


GO
CREATE TABLE [dbo].[Breed] (
    [BreedId]   INT           IDENTITY (1, 1) NOT NULL,
    [BreedName] NVARCHAR (40) NULL,
    [SpeciesId] INT           NULL,
    PRIMARY KEY CLUSTERED ([BreedId] ASC)
);


GO
PRINT N'Creating [dbo].[Species]...';


GO
CREATE TABLE [dbo].[Species] (
    [SpeciesId]   INT           IDENTITY (1, 1) NOT NULL,
    [SpeciesName] NVARCHAR (40) NULL,
    PRIMARY KEY CLUSTERED ([SpeciesId] ASC)
);


GO
PRINT N'Creating [dbo].[PetPolicy]...';


GO
CREATE TABLE [dbo].[PetPolicy] (
    [PetPolicyId]          INT  IDENTITY (1, 1) NOT NULL,
    [PetId]                INT  NOT NULL,
    [PolicyId]             INT  NOT NULL,
    [AddToPolicyDate]      DATE NOT NULL,
    [RemoveFromPolicyDate] DATE NULL,
    PRIMARY KEY CLUSTERED ([PetPolicyId] ASC)
);


GO
PRINT N'Creating [dbo].[PetPolicy].[IX_PetPolicy_AddToPolicyDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_PetPolicy_AddToPolicyDate]
    ON [dbo].[PetPolicy]([AddToPolicyDate] ASC);


GO
PRINT N'Creating [dbo].[FK_Owner_ToCountry]...';


GO
ALTER TABLE [dbo].[Owner]
    ADD CONSTRAINT [FK_Owner_ToCountry] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [dbo].[FK_Policy_ToCountry]...';


GO
ALTER TABLE [dbo].[Policy]
    ADD CONSTRAINT [FK_Policy_ToCountry] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [dbo].[FK_Policy_toOwner]...';


GO
ALTER TABLE [dbo].[Policy]
    ADD CONSTRAINT [FK_Policy_toOwner] FOREIGN KEY ([OwnerId]) REFERENCES [dbo].[Owner] ([OwnerId]);


GO
PRINT N'Creating [dbo].[FK_Pet_toOwner]...';


GO
ALTER TABLE [dbo].[Pet]
    ADD CONSTRAINT [FK_Pet_toOwner] FOREIGN KEY ([OwnerId]) REFERENCES [dbo].[Owner] ([OwnerId]);


GO
PRINT N'Creating [dbo].[FK_Pet_toBreed]...';


GO
ALTER TABLE [dbo].[Pet]
    ADD CONSTRAINT [FK_Pet_toBreed] FOREIGN KEY ([BreedId]) REFERENCES [dbo].[Breed] ([BreedId]);


GO
PRINT N'Creating [dbo].[FK_Breed_toSpecies]...';


GO
ALTER TABLE [dbo].[Breed]
    ADD CONSTRAINT [FK_Breed_toSpecies] FOREIGN KEY ([SpeciesId]) REFERENCES [dbo].[Species] ([SpeciesId]);


GO
PRINT N'Creating [dbo].[FK_PetPolicy_ToPet]...';


GO
ALTER TABLE [dbo].[PetPolicy]
    ADD CONSTRAINT [FK_PetPolicy_ToPet] FOREIGN KEY ([PetId]) REFERENCES [dbo].[Pet] ([PetId]);


GO
PRINT N'Creating [dbo].[FK_PetPolicy_ToPolicy]...';


GO
ALTER TABLE [dbo].[PetPolicy]
    ADD CONSTRAINT [FK_PetPolicy_ToPolicy] FOREIGN KEY ([PolicyId]) REFERENCES [dbo].[Policy] ([PolicyId]);


GO
PRINT N'Creating [dbo].[vwPolicyAndOwner]...';


GO

CREATE VIEW [dbo].[vwPolicyAndOwner]
	AS 
	SELECT 
		pol.PolicyId,
		pol.PolicyNumber,
		pol.PolicyEnrollmentDate,
		pol.PolicyCancellationDate,
		pol.CountryId,
		Country.CountryIso3LetterCode,
		o.OwnerId,
		o.OwnerName
	FROM Policy pol
	INNER JOIN Country
	ON pol.CountryId = Country.CountryId
	LEFT JOIN Owner o
	ON pol.OwnerId = o.OwnerId
GO
PRINT N'Creating [dbo].[vwPolicyAndPets]...';


GO

CREATE VIEW [dbo].[vwPolicyAndPets]
	AS 
	
	SELECT  
		pol.PolicyId,
		pol.PolicyNumber,
		p.PetId,
		p.PetName,
		p.PetDateOfBirth,
		s.SpeciesId,
		s.SpeciesName,
		b.BreedId,
		b.BreedName, 
		pp.AddToPolicyDate,
		pp.RemoveFromPolicyDate

	FROM Policy pol
	LEFT JOIN PetPolicy pp
	ON pol.PolicyId = pp.PolicyId
	INNER JOIN Pet p
	ON pp.PetId = p.PetId
	INNER JOIN Breed b
	ON p.BreedId = b.BreedId
	INNER JOIN Species s
	ON b.SpeciesId = s.SpeciesId
GO
PRINT N'Creating [dbo].[spOwnerInsert]...';


GO

CREATE PROCEDURE [dbo].[spOwnerInsert]
	@ownerName nvarchar(200),
	@countryIso3LetterCode char(3),
	@ownerId int = NULL OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @countryId int
	DECLARE @identity int
	DECLARE @rowCount int
	DECLARE @errorMessage nvarchar(250)

SELECT @countryId = CountryId 
		FROM dbo.Country 
		WHERE CountryIso3LetterCode = @countryIso3LetterCode
		SELECT @rowCount = @@ROWCOUNT
		IF @rowCount = 1
			BEGIN
				INSERT INTO [dbo].[Owner] 
				(
					[OwnerName], 
					[CountryId]
				) 
				VALUES 
				(
					@ownerName,
					@countryId
				)
				
				SET @ownerId = @@IDENTITY

				RETURN 0
				END;
		ELSE
			BEGIN
				SET @errorMessage = 'Country Id ' + CONVERT(char(3), @countryId) + ' not found.'
				RAISERROR(@errorMessage, 11, -1, 'spOwnerInsert')
				RETURN 99
			END;
END
GO
PRINT N'Creating [dbo].[spPetInsert]...';


GO

CREATE PROCEDURE [dbo].[spPetInsert]
	@ownerId int,
	@petName nvarchar(40),
	@speciesId int, -- 1 = cat, 2 = dog
	@breedName varchar(50),
	@petDateOfBirth date,
	@petId int = NULL OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @breedId int
	DECLARE @identity int
	DECLARE @rowCount int
	DECLARE @errorMessage nvarchar(250)

	-- get or insert breed
	-- for the purposes of this exercise we are not doing thorough
	--     checking to make sure the breed names are controlled
	--     but we would in production, or have them selected from a data-driven list
	SELECT @breedId = BreedId 
		FROM dbo.Breed 
		WHERE LOWER(BreedName) = LOWER(@breedName)
		SELECT @rowCount = @@ROWCOUNT
		IF @rowCount = 0
		BEGIN
			INSERT INTO Breed (BreedName, SpeciesId)
			VALUES (@breedName, @speciesId)
			SET @breedId = @@IDENTITY
		END


	INSERT INTO [dbo].[Pet] 
	(
		[OwnerId],
		[PetName],
		[BreedId],
		[PetDateOfBirth]
	) 
	VALUES 
	(
		@ownerId,
		@petName,
		@breedId,
		@petDateOfBirth
	)
				
	SET @petId = @@IDENTITY

	RETURN 0
		
END
GO
PRINT N'Creating [dbo].[spPolicyInsert]...';


GO


CREATE PROCEDURE [dbo].[spPolicyInsert]
	@ownerId int,
	@countryIso3LetterCode char(3),
	@policyNumber varchar(100) = NULL OUTPUT
AS
BEGIN
	SET NOCOUNT ON

		DECLARE @countryId int
		DECLARE @policyNumberIncrement int
		DECLARE @policyNumberIncrementString varchar(10)
		DECLARE @len int
		DECLARE @fill varchar(10)
		DECLARE @rowCount int
		DECLARE @errorMessage nvarchar(250)

		SELECT @countryId = CountryId 
		FROM dbo.Country 
		WHERE CountryIso3LetterCode = @countryIso3LetterCode
		SELECT @rowCount = @@ROWCOUNT
		IF @rowCount = 1
			BEGIN

				EXEC @policyNumberIncrement = fnGeneratePolicyNumber
				SELECT @policyNumberIncrementString = CONVERT(varchar(10), @policyNumberIncrement)
				SELECT @len=LEN(@policyNumberIncrementString)
				SELECT @fill = REPLICATE('0', 10-@len)

				SET @policyNumber = CONCAT(@countryIso3LetterCode, @fill, @policyNumberIncrement)
				INSERT INTO dbo.Policy
				(
					PolicyNumber
					, PolicyNumberIncrement
					, PolicyEnrollmentDate
					, CountryId
					, OwnerId
				)
				VALUES
				(
					@policyNumber
					, @policyNumberIncrement					
					, getdate()
					, @countryId
					, @ownerId
				)

				RETURN 0
				END;
		ELSE
			BEGIN
				SET @errorMessage = 'Country Id ' + CONVERT(char(3), @countryId) + ' not found.'
				RAISERROR(@errorMessage, 11, -1, 'spPolicyInsert')
				RETURN 99
			END;
		
END
GO
PRINT N'Creating [dbo].[spPetsMoveBetweenOwners]...';


GO

CREATE PROCEDURE [dbo].[spPetsMoveBetweenOwners]
	@prevOwnerId int,
	@newOwnerId int
AS
BEGIN
	SET NOCOUNT ON

/*
NOTE: Easy set-based implementation would be
	UPDATE Pet
	SET OwnerId = @newOwnerId
	WHERE OwnerId = @prevOwnerId
but that does not meet the requirement of moving pets one at a time
*/

DECLARE @petId int
DECLARE @err int

DECLARE pet_cursor CURSOR STATIC LOCAL
    FOR SELECT PetId FROM PET WHERE ownerId = @prevOwnerId 

BEGIN TRANSACTION

OPEN pet_cursor

WHILE 1 = 1
BEGIN
   FETCH NEXT FROM pet_cursor INTO @petId 
   IF @@fetch_status <> 0
      BREAK

   UPDATE Pet
   SET    OwnerId = @newOwnerId
   WHERE  PetId = @petId
   SELECT @err = @@error
   IF @err <> 0
      BREAK
END

DEALLOCATE pet_cursor

IF @err = 0
   COMMIT TRANSACTION
ELSE
   ROLLBACK TRANSACTION
		
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e3654c2f-eb9b-4114-95b3-2b46909c8ea2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e3654c2f-eb9b-4114-95b3-2b46909c8ea2')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
